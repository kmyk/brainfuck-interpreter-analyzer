#!/usr/bin/env python3
import os
import sys
import argparse
import subprocess
import tempfile

parser = argparse.ArgumentParser()
parser.add_argument('path',
    help='''brainfuck interpreter which takes the code from path $1 and takes the input from stdin. if your interpreter is not like this, please make a glue script file''')
parser.add_argument('--trailing', type=bytes, help='some interpreter outputs trailing spaces (default: auto detect)')
parser.add_argument('--memory-size', type=int, default=30000)
parser.add_argument('--timeout', type=int, default=12)
args = parser.parse_args()

class TimeoutExpired(Exception):
    pass

def execbf(code, input=''): # dict, or TimeoutExpired with dict
    fh = tempfile.NamedTemporaryFile(delete=False)
    fh.write(code.encode())
    fh.close()
    p = subprocess.Popen([args.path, fh.name],
            stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=sys.stderr, universal_newlines=False)
    timeout = False
    try:
        stdout, _ = p.communicate(input.encode(), timeout=args.timeout)
    except subprocess.TimeoutExpired:
        p.kill()
        stdout, _ = p.communicate()
        timeout = True
    os.unlink(fh.name)
    trailing = b''
    if args.trailing is not None and len(args.trailing) and stdout.endswith(args.trailing):
        stdout = stdout[:-len(args.trailing)]
        trailing = args.trailing
    result = { 'output': stdout, 'trailing': trailing, 'returncode': p.returncode, 'timeout': timeout }
    if timeout:
        e = TimeoutExpired()
        e.result = result
        raise e
    else:
        return result

def yesno(a):
    if a: return 'yes'
    else: return 'no'

if args.trailing is None:
    args.trailing = execbf('')['output']

print('helloworld: ', end='')
helloworld = ('++[>++[>++[>+++[>+++[>+<-][]<-]<-][]<-]<-]>>>>>.>++[>++[>++[<<<<++[>++<<<++>>-]>>>>-]<-]<-]<---.>>>[-]<<<+++++++>++[<.>-]+++[<+>-]<.<<+++[<<++++>>-]<[<+>>+<-]<.>>.>++[>>++[<+>-]>++[<<+>>-]<<<-]>.-------->+>+>+>+>+[<]>.[>]<+++,.------.--------.[,.[-]]<<<<', 'r!')
if execbf(*helloworld)['output'] == b'Hello, world!':
    print('ok')
else:
    print('no')
    parser.error('the interpreter is not valid. (please confirm the usage of your interpreter is "$ INTERPRETER SOURCE_FILE < INPUT_FILE")')

print('trailing output:', repr(args.trailing.decode()))

print('end of file: ', end='')
same_n = 3
result = execbf('+' * same_n + ',+' + '+' * ord('0') + '.')['output']
if result == b'0':
    print(-1)
elif result == b'1':
    print(0)
elif result == str(same_n + 1).encode():
    print('same')
else:
    print('unknown')

print('too large source code: ', end='')
large_code = '+-><[,.]><' * 10000 + ',.'
print(yesno(execbf(large_code, 'A')['output'] == b'A'),
        '({} bytes)'.format(len(large_code)))

print('move  negative  index: ', end='')
negative_index_movable = execbf('<>,.', 'A')['output'] == b'A'
print(yesno(negative_index_movable))

if negative_index_movable:
    print('write negative  index: ', end='')
    print(yesno(execbf('<,.', 'A')['output'] == b'A'))

if negative_index_movable:
    check_len = 1000
    print('negative index initialized: ', end='')
    print(yesno(execbf('<[,.[-]]' * check_len + ',.', 'A' * check_len + 'A')['output'] == b'A'))

print('move  too large index: ', end='')
large_index_movable = execbf('>' * args.memory_size + '<,.', 'A')['output'] == b'A'
print(yesno(large_index_movable))

if large_index_movable:
    print('write too large index: ', end='')
    print(yesno(execbf('>' * args.memory_size + ',.', 'A')['output'] == b'A'))

if large_index_movable:
    check_len = 1000
    print('too large index initialized: ', end='')
    print(yesno(execbf('>' * args.memory_size + '[,.[-]]>' * check_len + ',.', 'A' * check_len + 'A')['output'] == b'A'))

print('arithmetic underflow: ', end='')
print(yesno(execbf('-,.', 'A')['output'] == b'A'))

print('cell size: ', end='')
sys.stdout.flush()
try:
    cell_size = len(execbf(',.>+[<.>+]', 'A')['output'])
    print(cell_size)
except TimeoutExpired as e:
    cell_size = None
    # 16777216f + 1f = 16777216f  (0x1000000)
    if 0x1000000 < len(e.result['output']):
        try:
            single_float_checker = '++[>' * 23 + '++' + '<-]' * 23 + '>' * 24 + '[>,.[-]]<[<]>+++' + '<' * 24 + '++[>' * 23 + '--' + '<-]' * 23 + '>' * 24 + '[,>],.'
            single_float_cell = execbf(single_float_checker, 'ABC')['output'] == b'C'
        except TimeoutExpired:
            single_float_cell = False
    else:
        single_float_cell = False
    if single_float_cell:
        print('single float')
    else:
        print('unknown (timed out, at least {})'.format(len(e.result['output'])))

print('arithmetic  overflow: ', end='')
if cell_size is not None:
    print(yesno(execbf('+[+],.', 'A')['output'] == b'A'))
elif single_float_cell:
    print('never')
else:
    print('unknown')
